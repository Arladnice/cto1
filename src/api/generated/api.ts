/* tslint:disable */
/* eslint-disable */
/**
 * Query API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {number}
 */

export const AggregationType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type AggregationType = typeof AggregationType[keyof typeof AggregationType];


/**
 * 
 * @export
 * @interface CreateQcmDto
 */
export interface CreateQcmDto {
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'paramName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'subsidiaryCompany'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'field'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'typeObject1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'typeObject2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'techPosition'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'techPositionCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'department'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'serviceOrganization'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'contractNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'typeSiSa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'factoryNumberSiSa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'signalType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'groupSiSa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'criticalLevel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'expectedSignals'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'qsmSignal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateQcmDto
     */
    'descriptionServiceOrganization'?: string | null;
}
/**
 * 
 * @export
 * @interface DonutCharts
 */
export interface DonutCharts {
    /**
     * 
     * @type {number}
     * @memberof DonutCharts
     */
    'sumCounter'?: number;
    /**
     * 
     * @type {number}
     * @memberof DonutCharts
     */
    'verifiableCounter'?: number;
    /**
     * 
     * @type {number}
     * @memberof DonutCharts
     */
    'notVerifiableCounter'?: number;
    /**
     * 
     * @type {number}
     * @memberof DonutCharts
     */
    'percentVerifiableCounter'?: number;
    /**
     * 
     * @type {number}
     * @memberof DonutCharts
     */
    'percentNotVerifiableCounter'?: number;
}
/**
 * 
 * @export
 * @interface FieldStatDto
 */
export interface FieldStatDto {
    /**
     * 
     * @type {string}
     * @memberof FieldStatDto
     */
    'groupName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FieldStatDto
     */
    'sum'?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldStatDto
     */
    'good'?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldStatDto
     */
    'bad'?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldStatDto
     */
    'goodPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldStatDto
     */
    'badPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldStatDto
     */
    'sumParam'?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldStatDto
     */
    'distinctParam'?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldStatDto
     */
    'distinctParamFiltered'?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldStatDto
     */
    'withoutFilterPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldStatDto
     */
    'filterPercent'?: number;
}
/**
 * 
 * @export
 * @interface FieldValuesResponse
 */
export interface FieldValuesResponse {
    /**
     * 
     * @type {string}
     * @memberof FieldValuesResponse
     */
    'fieldName'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FieldValuesResponse
     */
    'values'?: Array<string> | null;
}
/**
 * 
 * @export
 * @enum {number}
 */

export const GeneralGroup = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type GeneralGroup = typeof GeneralGroup[keyof typeof GeneralGroup];


/**
 * 
 * @export
 * @interface GeneralIndicators
 */
export interface GeneralIndicators {
    /**
     * 
     * @type {string}
     * @memberof GeneralIndicators
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GeneralIndicators
     */
    'good'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeneralIndicators
     */
    'percentage'?: number;
}
/**
 * 
 * @export
 * @interface MonthsCharts
 */
export interface MonthsCharts {
    /**
     * 
     * @type {number}
     * @memberof MonthsCharts
     */
    'good'?: number;
    /**
     * 
     * @type {number}
     * @memberof MonthsCharts
     */
    'bad'?: number;
    /**
     * 
     * @type {string}
     * @memberof MonthsCharts
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface Qcm
 */
export interface Qcm {
    /**
     * 
     * @type {number}
     * @memberof Qcm
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'paramName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'subsidiaryCompany'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'field'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'typeObject1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'typeObject2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'techPosition'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'techPositionCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'department'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'serviceOrganization'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'contractNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'typeSiSa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'factoryNumberSiSa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'signalType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'groupSiSa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'criticalLevel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'expectedSignals'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'qsmSignal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Qcm
     */
    'descriptionServiceOrganization'?: string | null;
}
/**
 * 
 * @export
 * @interface QcmCursorResult
 */
export interface QcmCursorResult {
    /**
     * 
     * @type {Array<Qcm>}
     * @memberof QcmCursorResult
     */
    'items'?: Array<Qcm> | null;
    /**
     * 
     * @type {number}
     * @memberof QcmCursorResult
     */
    'nextCursor'?: number | null;
}
/**
 * 
 * @export
 * @interface QcmDto
 */
export interface QcmDto {
    /**
     * 
     * @type {number}
     * @memberof QcmDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'paramName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'subsidiaryCompany'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'field'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'typeObject1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'typeObject2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'techPosition'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'techPositionCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'department'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'serviceOrganization'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'contractNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'typeSiSa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'factoryNumberSiSa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'signalType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'groupSiSa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'criticalLevel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'expectedSignals'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'qsmSignal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QcmDto
     */
    'descriptionServiceOrganization'?: string | null;
}
/**
 * 
 * @export
 * @interface QualityCounter
 */
export interface QualityCounter {
    /**
     * 
     * @type {number}
     * @memberof QualityCounter
     */
    'sumCounter'?: number;
    /**
     * 
     * @type {number}
     * @memberof QualityCounter
     */
    'goodCounter'?: number;
    /**
     * 
     * @type {number}
     * @memberof QualityCounter
     */
    'badCounter'?: number;
    /**
     * 
     * @type {number}
     * @memberof QualityCounter
     */
    'percentGoodCounter'?: number;
    /**
     * 
     * @type {number}
     * @memberof QualityCounter
     */
    'percentBadCounter'?: number;
}
/**
 * 
 * @export
 * @interface SignalCounterAggregatedDto
 */
export interface SignalCounterAggregatedDto {
    /**
     * 
     * @type {number}
     * @memberof SignalCounterAggregatedDto
     */
    'qcmId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SignalCounterAggregatedDto
     */
    'sumCounter'?: number;
    /**
     * 
     * @type {number}
     * @memberof SignalCounterAggregatedDto
     */
    'goodCounter'?: number;
    /**
     * 
     * @type {number}
     * @memberof SignalCounterAggregatedDto
     */
    'badCounter'?: number;
    /**
     * 
     * @type {number}
     * @memberof SignalCounterAggregatedDto
     */
    'failCounter'?: number;
    /**
     * 
     * @type {string}
     * @memberof SignalCounterAggregatedDto
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @enum {number}
 */

export const TableGroup = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type TableGroup = typeof TableGroup[keyof typeof TableGroup];


/**
 * 
 * @export
 * @interface UpdateQcmDto
 */
export interface UpdateQcmDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'paramName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'subsidiaryCompany'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'field'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'typeObject1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'typeObject2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'techPosition'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'techPositionCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'department'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'serviceOrganization'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'contractNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'typeSiSa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'factoryNumberSiSa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'signalType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'groupSiSa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'criticalLevel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'expectedSignals'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'qsmSignal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateQcmDto
     */
    'descriptionServiceOrganization'?: string | null;
}

/**
 * AggregationApi - axios parameter creator
 * @export
 */
export const AggregationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [idPar] 
         * @param {string} [dtStart] 
         * @param {string} [dtEnd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataEndpointsPost: async (idPar?: number, dtStart?: string, dtEnd?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Data/endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idPar !== undefined) {
                localVarQueryParameter['idPar'] = idPar;
            }

            if (dtStart !== undefined) {
                localVarQueryParameter['dtStart'] = (dtStart as any instanceof Date) ?
                    (dtStart as any).toISOString() :
                    dtStart;
            }

            if (dtEnd !== undefined) {
                localVarQueryParameter['dtEnd'] = (dtEnd as any instanceof Date) ?
                    (dtEnd as any).toISOString() :
                    dtEnd;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AggregationApi - functional programming interface
 * @export
 */
export const AggregationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AggregationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [idPar] 
         * @param {string} [dtStart] 
         * @param {string} [dtEnd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataEndpointsPost(idPar?: number, dtStart?: string, dtEnd?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataEndpointsPost(idPar, dtStart, dtEnd, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AggregationApi.apiDataEndpointsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AggregationApi - factory interface
 * @export
 */
export const AggregationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AggregationApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [idPar] 
         * @param {string} [dtStart] 
         * @param {string} [dtEnd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataEndpointsPost(idPar?: number, dtStart?: string, dtEnd?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDataEndpointsPost(idPar, dtStart, dtEnd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AggregationApi - object-oriented interface
 * @export
 * @class AggregationApi
 * @extends {BaseAPI}
 */
export class AggregationApi extends BaseAPI {
    /**
     * 
     * @param {number} [idPar] 
     * @param {string} [dtStart] 
     * @param {string} [dtEnd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AggregationApi
     */
    public apiDataEndpointsPost(idPar?: number, dtStart?: string, dtEnd?: string, options?: RawAxiosRequestConfig) {
        return AggregationApiFp(this.configuration).apiDataEndpointsPost(idPar, dtStart, dtEnd, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChartsApi - axios parameter creator
 * @export
 */
export const ChartsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChartsGetChartsByMonthsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Charts/GetChartsByMonths`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [date] 
         * @param {string} [dateEnd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChartsGetGeneralCounterGet: async (date?: string, dateEnd?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Charts/GetGeneralCounter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString() :
                    date;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['dateEnd'] = (dateEnd as any instanceof Date) ?
                    (dateEnd as any).toISOString() :
                    dateEnd;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [date] 
         * @param {string} [dateEnd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChartsGetQualityCounterGet: async (date?: string, dateEnd?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Charts/GetQualityCounter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString() :
                    date;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['dateEnd'] = (dateEnd as any instanceof Date) ?
                    (dateEnd as any).toISOString() :
                    dateEnd;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChartsApi - functional programming interface
 * @export
 */
export const ChartsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChartsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChartsGetChartsByMonthsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MonthsCharts>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChartsGetChartsByMonthsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChartsApi.apiChartsGetChartsByMonthsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [date] 
         * @param {string} [dateEnd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChartsGetGeneralCounterGet(date?: string, dateEnd?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonutCharts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChartsGetGeneralCounterGet(date, dateEnd, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChartsApi.apiChartsGetGeneralCounterGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [date] 
         * @param {string} [dateEnd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChartsGetQualityCounterGet(date?: string, dateEnd?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualityCounter>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChartsGetQualityCounterGet(date, dateEnd, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChartsApi.apiChartsGetQualityCounterGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChartsApi - factory interface
 * @export
 */
export const ChartsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChartsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChartsGetChartsByMonthsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<MonthsCharts>> {
            return localVarFp.apiChartsGetChartsByMonthsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [date] 
         * @param {string} [dateEnd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChartsGetGeneralCounterGet(date?: string, dateEnd?: string, options?: RawAxiosRequestConfig): AxiosPromise<DonutCharts> {
            return localVarFp.apiChartsGetGeneralCounterGet(date, dateEnd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [date] 
         * @param {string} [dateEnd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChartsGetQualityCounterGet(date?: string, dateEnd?: string, options?: RawAxiosRequestConfig): AxiosPromise<QualityCounter> {
            return localVarFp.apiChartsGetQualityCounterGet(date, dateEnd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChartsApi - object-oriented interface
 * @export
 * @class ChartsApi
 * @extends {BaseAPI}
 */
export class ChartsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public apiChartsGetChartsByMonthsGet(options?: RawAxiosRequestConfig) {
        return ChartsApiFp(this.configuration).apiChartsGetChartsByMonthsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [date] 
     * @param {string} [dateEnd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public apiChartsGetGeneralCounterGet(date?: string, dateEnd?: string, options?: RawAxiosRequestConfig) {
        return ChartsApiFp(this.configuration).apiChartsGetGeneralCounterGet(date, dateEnd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [date] 
     * @param {string} [dateEnd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public apiChartsGetQualityCounterGet(date?: string, dateEnd?: string, options?: RawAxiosRequestConfig) {
        return ChartsApiFp(this.configuration).apiChartsGetQualityCounterGet(date, dateEnd, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DataApi - axios parameter creator
 * @export
 */
export const DataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [idPar] 
         * @param {string} [date] 
         * @param {AggregationType} [agg] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataGetDataGet: async (idPar?: number, date?: string, agg?: AggregationType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Data/GetData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idPar !== undefined) {
                localVarQueryParameter['idPar'] = idPar;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (agg !== undefined) {
                localVarQueryParameter['agg'] = agg;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [fieldName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataGetFieldGet: async (fieldName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Data/GetField`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fieldName !== undefined) {
                localVarQueryParameter['fieldName'] = fieldName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [idPar] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataGetFiltersGet: async (idPar?: number, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Data/GetFilters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idPar !== undefined) {
                localVarQueryParameter['idPar'] = idPar;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [cursor] 
         * @param {number} [limit] 
         * @param {Array<string>} [sortBy] 
         * @param {Array<string>} [sortDirection] 
         * @param {Array<string>} [paramName] 
         * @param {Array<string>} [subsidiaryCompany] 
         * @param {Array<string>} [field] 
         * @param {Array<string>} [typeObject1] 
         * @param {Array<string>} [typeObject2] 
         * @param {Array<string>} [techPosition] 
         * @param {Array<string>} [techPositionCode] 
         * @param {Array<string>} [department] 
         * @param {Array<string>} [serviceOrganization] 
         * @param {Array<string>} [contractNumber] 
         * @param {Array<string>} [typeSiSa] 
         * @param {Array<string>} [factoryNumberSiSa] 
         * @param {Array<string>} [signalType] 
         * @param {Array<string>} [groupSiSa] 
         * @param {Array<string>} [criticalLevel] 
         * @param {Array<string>} [expectedSignals] 
         * @param {Array<string>} [qsmSignal] 
         * @param {Array<string>} [descriptionServiceOrganization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataGetQcmsGet: async (cursor?: number, limit?: number, sortBy?: Array<string>, sortDirection?: Array<string>, paramName?: Array<string>, subsidiaryCompany?: Array<string>, field?: Array<string>, typeObject1?: Array<string>, typeObject2?: Array<string>, techPosition?: Array<string>, techPositionCode?: Array<string>, department?: Array<string>, serviceOrganization?: Array<string>, contractNumber?: Array<string>, typeSiSa?: Array<string>, factoryNumberSiSa?: Array<string>, signalType?: Array<string>, groupSiSa?: Array<string>, criticalLevel?: Array<string>, expectedSignals?: Array<string>, qsmSignal?: Array<string>, descriptionServiceOrganization?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Data/GetQcms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortBy) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortDirection) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (paramName) {
                localVarQueryParameter['paramName'] = paramName;
            }

            if (subsidiaryCompany) {
                localVarQueryParameter['subsidiaryCompany'] = subsidiaryCompany;
            }

            if (field) {
                localVarQueryParameter['field'] = field;
            }

            if (typeObject1) {
                localVarQueryParameter['typeObject1'] = typeObject1;
            }

            if (typeObject2) {
                localVarQueryParameter['typeObject2'] = typeObject2;
            }

            if (techPosition) {
                localVarQueryParameter['techPosition'] = techPosition;
            }

            if (techPositionCode) {
                localVarQueryParameter['techPositionCode'] = techPositionCode;
            }

            if (department) {
                localVarQueryParameter['department'] = department;
            }

            if (serviceOrganization) {
                localVarQueryParameter['serviceOrganization'] = serviceOrganization;
            }

            if (contractNumber) {
                localVarQueryParameter['contractNumber'] = contractNumber;
            }

            if (typeSiSa) {
                localVarQueryParameter['typeSiSa'] = typeSiSa;
            }

            if (factoryNumberSiSa) {
                localVarQueryParameter['factoryNumberSiSa'] = factoryNumberSiSa;
            }

            if (signalType) {
                localVarQueryParameter['signalType'] = signalType;
            }

            if (groupSiSa) {
                localVarQueryParameter['groupSiSa'] = groupSiSa;
            }

            if (criticalLevel) {
                localVarQueryParameter['criticalLevel'] = criticalLevel;
            }

            if (expectedSignals) {
                localVarQueryParameter['expectedSignals'] = expectedSignals;
            }

            if (qsmSignal) {
                localVarQueryParameter['qsmSignal'] = qsmSignal;
            }

            if (descriptionServiceOrganization) {
                localVarQueryParameter['descriptionServiceOrganization'] = descriptionServiceOrganization;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataApi - functional programming interface
 * @export
 */
export const DataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [idPar] 
         * @param {string} [date] 
         * @param {AggregationType} [agg] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataGetDataGet(idPar?: number, date?: string, agg?: AggregationType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SignalCounterAggregatedDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataGetDataGet(idPar, date, agg, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataApi.apiDataGetDataGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [fieldName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataGetFieldGet(fieldName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldValuesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataGetFieldGet(fieldName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataApi.apiDataGetFieldGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [idPar] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataGetFiltersGet(idPar?: number, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataGetFiltersGet(idPar, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataApi.apiDataGetFiltersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [cursor] 
         * @param {number} [limit] 
         * @param {Array<string>} [sortBy] 
         * @param {Array<string>} [sortDirection] 
         * @param {Array<string>} [paramName] 
         * @param {Array<string>} [subsidiaryCompany] 
         * @param {Array<string>} [field] 
         * @param {Array<string>} [typeObject1] 
         * @param {Array<string>} [typeObject2] 
         * @param {Array<string>} [techPosition] 
         * @param {Array<string>} [techPositionCode] 
         * @param {Array<string>} [department] 
         * @param {Array<string>} [serviceOrganization] 
         * @param {Array<string>} [contractNumber] 
         * @param {Array<string>} [typeSiSa] 
         * @param {Array<string>} [factoryNumberSiSa] 
         * @param {Array<string>} [signalType] 
         * @param {Array<string>} [groupSiSa] 
         * @param {Array<string>} [criticalLevel] 
         * @param {Array<string>} [expectedSignals] 
         * @param {Array<string>} [qsmSignal] 
         * @param {Array<string>} [descriptionServiceOrganization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataGetQcmsGet(cursor?: number, limit?: number, sortBy?: Array<string>, sortDirection?: Array<string>, paramName?: Array<string>, subsidiaryCompany?: Array<string>, field?: Array<string>, typeObject1?: Array<string>, typeObject2?: Array<string>, techPosition?: Array<string>, techPositionCode?: Array<string>, department?: Array<string>, serviceOrganization?: Array<string>, contractNumber?: Array<string>, typeSiSa?: Array<string>, factoryNumberSiSa?: Array<string>, signalType?: Array<string>, groupSiSa?: Array<string>, criticalLevel?: Array<string>, expectedSignals?: Array<string>, qsmSignal?: Array<string>, descriptionServiceOrganization?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QcmCursorResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataGetQcmsGet(cursor, limit, sortBy, sortDirection, paramName, subsidiaryCompany, field, typeObject1, typeObject2, techPosition, techPositionCode, department, serviceOrganization, contractNumber, typeSiSa, factoryNumberSiSa, signalType, groupSiSa, criticalLevel, expectedSignals, qsmSignal, descriptionServiceOrganization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataApi.apiDataGetQcmsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DataApi - factory interface
 * @export
 */
export const DataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [idPar] 
         * @param {string} [date] 
         * @param {AggregationType} [agg] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataGetDataGet(idPar?: number, date?: string, agg?: AggregationType, options?: RawAxiosRequestConfig): AxiosPromise<Array<SignalCounterAggregatedDto>> {
            return localVarFp.apiDataGetDataGet(idPar, date, agg, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [fieldName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataGetFieldGet(fieldName?: string, options?: RawAxiosRequestConfig): AxiosPromise<FieldValuesResponse> {
            return localVarFp.apiDataGetFieldGet(fieldName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [idPar] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataGetFiltersGet(idPar?: number, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDataGetFiltersGet(idPar, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [cursor] 
         * @param {number} [limit] 
         * @param {Array<string>} [sortBy] 
         * @param {Array<string>} [sortDirection] 
         * @param {Array<string>} [paramName] 
         * @param {Array<string>} [subsidiaryCompany] 
         * @param {Array<string>} [field] 
         * @param {Array<string>} [typeObject1] 
         * @param {Array<string>} [typeObject2] 
         * @param {Array<string>} [techPosition] 
         * @param {Array<string>} [techPositionCode] 
         * @param {Array<string>} [department] 
         * @param {Array<string>} [serviceOrganization] 
         * @param {Array<string>} [contractNumber] 
         * @param {Array<string>} [typeSiSa] 
         * @param {Array<string>} [factoryNumberSiSa] 
         * @param {Array<string>} [signalType] 
         * @param {Array<string>} [groupSiSa] 
         * @param {Array<string>} [criticalLevel] 
         * @param {Array<string>} [expectedSignals] 
         * @param {Array<string>} [qsmSignal] 
         * @param {Array<string>} [descriptionServiceOrganization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataGetQcmsGet(cursor?: number, limit?: number, sortBy?: Array<string>, sortDirection?: Array<string>, paramName?: Array<string>, subsidiaryCompany?: Array<string>, field?: Array<string>, typeObject1?: Array<string>, typeObject2?: Array<string>, techPosition?: Array<string>, techPositionCode?: Array<string>, department?: Array<string>, serviceOrganization?: Array<string>, contractNumber?: Array<string>, typeSiSa?: Array<string>, factoryNumberSiSa?: Array<string>, signalType?: Array<string>, groupSiSa?: Array<string>, criticalLevel?: Array<string>, expectedSignals?: Array<string>, qsmSignal?: Array<string>, descriptionServiceOrganization?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<QcmCursorResult> {
            return localVarFp.apiDataGetQcmsGet(cursor, limit, sortBy, sortDirection, paramName, subsidiaryCompany, field, typeObject1, typeObject2, techPosition, techPositionCode, department, serviceOrganization, contractNumber, typeSiSa, factoryNumberSiSa, signalType, groupSiSa, criticalLevel, expectedSignals, qsmSignal, descriptionServiceOrganization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export class DataApi extends BaseAPI {
    /**
     * 
     * @param {number} [idPar] 
     * @param {string} [date] 
     * @param {AggregationType} [agg] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiDataGetDataGet(idPar?: number, date?: string, agg?: AggregationType, options?: RawAxiosRequestConfig) {
        return DataApiFp(this.configuration).apiDataGetDataGet(idPar, date, agg, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [fieldName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiDataGetFieldGet(fieldName?: string, options?: RawAxiosRequestConfig) {
        return DataApiFp(this.configuration).apiDataGetFieldGet(fieldName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [idPar] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiDataGetFiltersGet(idPar?: number, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DataApiFp(this.configuration).apiDataGetFiltersGet(idPar, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [cursor] 
     * @param {number} [limit] 
     * @param {Array<string>} [sortBy] 
     * @param {Array<string>} [sortDirection] 
     * @param {Array<string>} [paramName] 
     * @param {Array<string>} [subsidiaryCompany] 
     * @param {Array<string>} [field] 
     * @param {Array<string>} [typeObject1] 
     * @param {Array<string>} [typeObject2] 
     * @param {Array<string>} [techPosition] 
     * @param {Array<string>} [techPositionCode] 
     * @param {Array<string>} [department] 
     * @param {Array<string>} [serviceOrganization] 
     * @param {Array<string>} [contractNumber] 
     * @param {Array<string>} [typeSiSa] 
     * @param {Array<string>} [factoryNumberSiSa] 
     * @param {Array<string>} [signalType] 
     * @param {Array<string>} [groupSiSa] 
     * @param {Array<string>} [criticalLevel] 
     * @param {Array<string>} [expectedSignals] 
     * @param {Array<string>} [qsmSignal] 
     * @param {Array<string>} [descriptionServiceOrganization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiDataGetQcmsGet(cursor?: number, limit?: number, sortBy?: Array<string>, sortDirection?: Array<string>, paramName?: Array<string>, subsidiaryCompany?: Array<string>, field?: Array<string>, typeObject1?: Array<string>, typeObject2?: Array<string>, techPosition?: Array<string>, techPositionCode?: Array<string>, department?: Array<string>, serviceOrganization?: Array<string>, contractNumber?: Array<string>, typeSiSa?: Array<string>, factoryNumberSiSa?: Array<string>, signalType?: Array<string>, groupSiSa?: Array<string>, criticalLevel?: Array<string>, expectedSignals?: Array<string>, qsmSignal?: Array<string>, descriptionServiceOrganization?: Array<string>, options?: RawAxiosRequestConfig) {
        return DataApiFp(this.configuration).apiDataGetQcmsGet(cursor, limit, sortBy, sortDirection, paramName, subsidiaryCompany, field, typeObject1, typeObject2, techPosition, techPositionCode, department, serviceOrganization, contractNumber, typeSiSa, factoryNumberSiSa, signalType, groupSiSa, criticalLevel, expectedSignals, qsmSignal, descriptionServiceOrganization, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {GeneralGroup} [generalGroup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataGeneralGroupGet: async (startDate?: string, endDate?: string, generalGroup?: GeneralGroup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Data/GeneralGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (generalGroup !== undefined) {
                localVarQueryParameter['generalGroup'] = generalGroup;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [date] 
         * @param {string} [dateEnd] 
         * @param {TableGroup} [tableGroup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataTableGroupGet: async (date?: string, dateEnd?: string, tableGroup?: TableGroup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Data/TableGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString() :
                    date;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['dateEnd'] = (dateEnd as any instanceof Date) ?
                    (dateEnd as any).toISOString() :
                    dateEnd;
            }

            if (tableGroup !== undefined) {
                localVarQueryParameter['tableGroup'] = tableGroup;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {GeneralGroup} [generalGroup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataGeneralGroupGet(startDate?: string, endDate?: string, generalGroup?: GeneralGroup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GeneralIndicators>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataGeneralGroupGet(startDate, endDate, generalGroup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.apiDataGeneralGroupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [date] 
         * @param {string} [dateEnd] 
         * @param {TableGroup} [tableGroup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataTableGroupGet(date?: string, dateEnd?: string, tableGroup?: TableGroup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FieldStatDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataTableGroupGet(date, dateEnd, tableGroup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.apiDataTableGroupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {GeneralGroup} [generalGroup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataGeneralGroupGet(startDate?: string, endDate?: string, generalGroup?: GeneralGroup, options?: RawAxiosRequestConfig): AxiosPromise<Array<GeneralIndicators>> {
            return localVarFp.apiDataGeneralGroupGet(startDate, endDate, generalGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [date] 
         * @param {string} [dateEnd] 
         * @param {TableGroup} [tableGroup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataTableGroupGet(date?: string, dateEnd?: string, tableGroup?: TableGroup, options?: RawAxiosRequestConfig): AxiosPromise<Array<FieldStatDto>> {
            return localVarFp.apiDataTableGroupGet(date, dateEnd, tableGroup, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
    /**
     * 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {GeneralGroup} [generalGroup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public apiDataGeneralGroupGet(startDate?: string, endDate?: string, generalGroup?: GeneralGroup, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).apiDataGeneralGroupGet(startDate, endDate, generalGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [date] 
     * @param {string} [dateEnd] 
     * @param {TableGroup} [tableGroup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public apiDataTableGroupGet(date?: string, dateEnd?: string, tableGroup?: TableGroup, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).apiDataTableGroupGet(date, dateEnd, tableGroup, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QcmApi - axios parameter creator
 * @export
 */
export const QcmApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<CreateQcmDto>} [createQcmDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQcmBulkPost: async (createQcmDto?: Array<CreateQcmDto>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Qcm/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQcmDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQcmGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Qcm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQcmIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQcmIdDelete', 'id', id)
            const localVarPath = `/api/Qcm/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQcmIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQcmIdGet', 'id', id)
            const localVarPath = `/api/Qcm/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateQcmDto} [updateQcmDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQcmIdPatch: async (id: number, updateQcmDto?: UpdateQcmDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQcmIdPatch', 'id', id)
            const localVarPath = `/api/Qcm/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateQcmDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateQcmDto} [createQcmDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQcmPost: async (createQcmDto?: CreateQcmDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Qcm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQcmDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QcmApi - functional programming interface
 * @export
 */
export const QcmApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QcmApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<CreateQcmDto>} [createQcmDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQcmBulkPost(createQcmDto?: Array<CreateQcmDto>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQcmBulkPost(createQcmDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QcmApi.apiQcmBulkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQcmGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QcmDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQcmGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QcmApi.apiQcmGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQcmIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQcmIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QcmApi.apiQcmIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQcmIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QcmDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQcmIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QcmApi.apiQcmIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateQcmDto} [updateQcmDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQcmIdPatch(id: number, updateQcmDto?: UpdateQcmDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQcmIdPatch(id, updateQcmDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QcmApi.apiQcmIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateQcmDto} [createQcmDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQcmPost(createQcmDto?: CreateQcmDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QcmDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQcmPost(createQcmDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QcmApi.apiQcmPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QcmApi - factory interface
 * @export
 */
export const QcmApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QcmApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<CreateQcmDto>} [createQcmDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQcmBulkPost(createQcmDto?: Array<CreateQcmDto>, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiQcmBulkPost(createQcmDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQcmGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<QcmDto>> {
            return localVarFp.apiQcmGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQcmIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiQcmIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQcmIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<QcmDto> {
            return localVarFp.apiQcmIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateQcmDto} [updateQcmDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQcmIdPatch(id: number, updateQcmDto?: UpdateQcmDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiQcmIdPatch(id, updateQcmDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateQcmDto} [createQcmDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQcmPost(createQcmDto?: CreateQcmDto, options?: RawAxiosRequestConfig): AxiosPromise<QcmDto> {
            return localVarFp.apiQcmPost(createQcmDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QcmApi - object-oriented interface
 * @export
 * @class QcmApi
 * @extends {BaseAPI}
 */
export class QcmApi extends BaseAPI {
    /**
     * 
     * @param {Array<CreateQcmDto>} [createQcmDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QcmApi
     */
    public apiQcmBulkPost(createQcmDto?: Array<CreateQcmDto>, options?: RawAxiosRequestConfig) {
        return QcmApiFp(this.configuration).apiQcmBulkPost(createQcmDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QcmApi
     */
    public apiQcmGet(options?: RawAxiosRequestConfig) {
        return QcmApiFp(this.configuration).apiQcmGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QcmApi
     */
    public apiQcmIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return QcmApiFp(this.configuration).apiQcmIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QcmApi
     */
    public apiQcmIdGet(id: number, options?: RawAxiosRequestConfig) {
        return QcmApiFp(this.configuration).apiQcmIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateQcmDto} [updateQcmDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QcmApi
     */
    public apiQcmIdPatch(id: number, updateQcmDto?: UpdateQcmDto, options?: RawAxiosRequestConfig) {
        return QcmApiFp(this.configuration).apiQcmIdPatch(id, updateQcmDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateQcmDto} [createQcmDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QcmApi
     */
    public apiQcmPost(createQcmDto?: CreateQcmDto, options?: RawAxiosRequestConfig) {
        return QcmApiFp(this.configuration).apiQcmPost(createQcmDto, options).then((request) => request(this.axios, this.basePath));
    }
}



